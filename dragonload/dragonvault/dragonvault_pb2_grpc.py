# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import dragonvault_pb2 as dragonvault__pb2


class DragonvaultStub(object):
    """An RPC designed to aid the server dragonvault.

    Objective to transfer User, Room details loaded in the server.
    Includes features for List, Create or Join room.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.LogUser = channel.unary_unary(
                '/Dragonvault/LogUser',
                request_serializer=dragonvault__pb2.User.SerializeToString,
                response_deserializer=dragonvault__pb2.Ack.FromString,
                )
        self.ListRooms = channel.unary_stream(
                '/Dragonvault/ListRooms',
                request_serializer=dragonvault__pb2.Empty.SerializeToString,
                response_deserializer=dragonvault__pb2.Room.FromString,
                )
        self.JoinRoom = channel.unary_unary(
                '/Dragonvault/JoinRoom',
                request_serializer=dragonvault__pb2.UserRoom.SerializeToString,
                response_deserializer=dragonvault__pb2.Ack.FromString,
                )
        self.CreateRoom = channel.unary_unary(
                '/Dragonvault/CreateRoom',
                request_serializer=dragonvault__pb2.Room.SerializeToString,
                response_deserializer=dragonvault__pb2.Ack.FromString,
                )
        self.InfoRoom = channel.unary_unary(
                '/Dragonvault/InfoRoom',
                request_serializer=dragonvault__pb2.Room.SerializeToString,
                response_deserializer=dragonvault__pb2.Room.FromString,
                )
        self.SubmitUrl = channel.unary_unary(
                '/Dragonvault/SubmitUrl',
                request_serializer=dragonvault__pb2.Url.SerializeToString,
                response_deserializer=dragonvault__pb2.Ack.FromString,
                )
        self.StartDownload = channel.unary_unary(
                '/Dragonvault/StartDownload',
                request_serializer=dragonvault__pb2.Empty.SerializeToString,
                response_deserializer=dragonvault__pb2.Ack.FromString,
                )


class DragonvaultServicer(object):
    """An RPC designed to aid the server dragonvault.

    Objective to transfer User, Room details loaded in the server.
    Includes features for List, Create or Join room.
    """

    def LogUser(self, request, context):
        """Log active user
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListRooms(self, request, context):
        """List the rooms currently recorded in the Server
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def JoinRoom(self, request, context):
        """Join a specific room from the rooms list
        FIX: Return Ack or return Room?
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateRoom(self, request, context):
        """Create a new room and add to the list
        FIX: Return Ack or return Room?
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InfoRoom(self, request, context):
        """Optional but needed feature to get room details
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubmitUrl(self, request, context):
        """The next level of functions define operations inside a room.
        Includes features to submit URL, Start Download, etc...

        Submit URL
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartDownload(self, request, context):
        """Start Download when everyone is ready

        ReDo this whole part again.  Split it protocol wise.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DragonvaultServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'LogUser': grpc.unary_unary_rpc_method_handler(
                    servicer.LogUser,
                    request_deserializer=dragonvault__pb2.User.FromString,
                    response_serializer=dragonvault__pb2.Ack.SerializeToString,
            ),
            'ListRooms': grpc.unary_stream_rpc_method_handler(
                    servicer.ListRooms,
                    request_deserializer=dragonvault__pb2.Empty.FromString,
                    response_serializer=dragonvault__pb2.Room.SerializeToString,
            ),
            'JoinRoom': grpc.unary_unary_rpc_method_handler(
                    servicer.JoinRoom,
                    request_deserializer=dragonvault__pb2.UserRoom.FromString,
                    response_serializer=dragonvault__pb2.Ack.SerializeToString,
            ),
            'CreateRoom': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateRoom,
                    request_deserializer=dragonvault__pb2.Room.FromString,
                    response_serializer=dragonvault__pb2.Ack.SerializeToString,
            ),
            'InfoRoom': grpc.unary_unary_rpc_method_handler(
                    servicer.InfoRoom,
                    request_deserializer=dragonvault__pb2.Room.FromString,
                    response_serializer=dragonvault__pb2.Room.SerializeToString,
            ),
            'SubmitUrl': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitUrl,
                    request_deserializer=dragonvault__pb2.Url.FromString,
                    response_serializer=dragonvault__pb2.Ack.SerializeToString,
            ),
            'StartDownload': grpc.unary_unary_rpc_method_handler(
                    servicer.StartDownload,
                    request_deserializer=dragonvault__pb2.Empty.FromString,
                    response_serializer=dragonvault__pb2.Ack.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Dragonvault', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Dragonvault(object):
    """An RPC designed to aid the server dragonvault.

    Objective to transfer User, Room details loaded in the server.
    Includes features for List, Create or Join room.
    """

    @staticmethod
    def LogUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Dragonvault/LogUser',
            dragonvault__pb2.User.SerializeToString,
            dragonvault__pb2.Ack.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListRooms(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Dragonvault/ListRooms',
            dragonvault__pb2.Empty.SerializeToString,
            dragonvault__pb2.Room.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def JoinRoom(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Dragonvault/JoinRoom',
            dragonvault__pb2.UserRoom.SerializeToString,
            dragonvault__pb2.Ack.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateRoom(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Dragonvault/CreateRoom',
            dragonvault__pb2.Room.SerializeToString,
            dragonvault__pb2.Ack.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InfoRoom(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Dragonvault/InfoRoom',
            dragonvault__pb2.Room.SerializeToString,
            dragonvault__pb2.Room.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubmitUrl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Dragonvault/SubmitUrl',
            dragonvault__pb2.Url.SerializeToString,
            dragonvault__pb2.Ack.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartDownload(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Dragonvault/StartDownload',
            dragonvault__pb2.Empty.SerializeToString,
            dragonvault__pb2.Ack.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
